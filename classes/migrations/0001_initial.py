# Generated by Django 5.2.3 on 2025-06-26 10:34

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the class category')),
                ('icon', models.CharField(blank=True, help_text='Icon name or identifier', max_length=50)),
                ('color', models.CharField(blank=True, help_text='Hex color code for the category', max_length=7)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Order for display purposes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Class Category',
                'verbose_name_plural': 'Class Categories',
                'db_table': 'class_categories',
                'ordering': ['sort_order', 'name'],
                'indexes': [models.Index(fields=['name'], name='class_categ_name_4a783b_idx'), models.Index(fields=['is_active'], name='class_categ_is_acti_a319c7_idx'), models.Index(fields=['sort_order'], name='class_categ_sort_or_066b9d_idx')],
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the class')),
                ('duration', models.PositiveIntegerField(help_text='Duration in minutes', validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(300)])),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('all_levels', 'All Levels')], default='all_levels', max_length=15)),
                ('max_capacity', models.PositiveIntegerField(default=20, help_text='Maximum number of participants', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('location_type', models.CharField(choices=[('in_person', 'In Person'), ('virtual', 'Virtual'), ('hybrid', 'Hybrid')], default='in_person', max_length=10)),
                ('location_name', models.CharField(blank=True, help_text='Gym name or virtual platform', max_length=200)),
                ('location_address', models.TextField(blank=True, help_text='Physical address for in-person classes')),
                ('requirements', models.TextField(blank=True, help_text='What participants need to bring or prepare')),
                ('what_to_expect', models.TextField(blank=True, help_text='What participants can expect from the class')),
                ('benefits', models.TextField(blank=True, help_text='Benefits of taking this class')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Price per class session', max_digits=8, null=True)),
                ('currency', models.CharField(default='USD', help_text='Currency code', max_length=3)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('is_featured', models.BooleanField(db_index=True, default=False)),
                ('image', models.URLField(blank=True, help_text='URL to class image')),
                ('video_url', models.URLField(blank=True, help_text='URL to promotional video')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instructor', models.ForeignKey(help_text='Instructor for this class', limit_choices_to={'user_type': 'instructor'}, on_delete=django.db.models.deletion.CASCADE, related_name='instructed_classes', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(help_text='Category this class belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='classes.classcategory')),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
                'db_table': 'classes',
                'ordering': ['-is_featured', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClassSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(db_index=True, help_text='Start time of the class')),
                ('end_time', models.DateTimeField(help_text='End time of the class')),
                ('max_capacity', models.PositiveIntegerField(help_text='Maximum capacity for this session', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('booked_slots', models.PositiveIntegerField(default=0, help_text='Number of booked slots')),
                ('waitlist_enabled', models.BooleanField(default=True, help_text='Enable waitlist when full')),
                ('recurring_type', models.CharField(choices=[('none', 'No Recurring'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='none', help_text='Type of recurring schedule', max_length=10)),
                ('recurring_end_date', models.DateField(blank=True, help_text='End date for recurring schedule', null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('full', 'Full')], db_index=True, default='active', max_length=10)),
                ('notes', models.TextField(blank=True, help_text='Additional notes for this session')),
                ('cancellation_reason', models.TextField(blank=True, help_text='Reason for cancellation if applicable')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_obj', models.ForeignKey(help_text='The class this schedule belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='classes.class')),
                ('instructor', models.ForeignKey(help_text='Instructor for this session', limit_choices_to={'user_type': 'instructor'}, on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_classes', to=settings.AUTH_USER_MODEL)),
                ('parent_schedule', models.ForeignKey(blank=True, help_text='Parent schedule for recurring instances', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurring_instances', to='classes.classschedule')),
            ],
            options={
                'verbose_name': 'Class Schedule',
                'verbose_name_plural': 'Class Schedules',
                'db_table': 'class_schedules',
                'ordering': ['start_time'],
            },
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['name'], name='classes_name_f45b08_idx'),
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['category'], name='classes_categor_31383e_idx'),
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['instructor'], name='classes_instruc_f74f76_idx'),
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['difficulty_level'], name='classes_difficu_9da695_idx'),
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['location_type'], name='classes_locatio_f0a189_idx'),
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['is_active'], name='classes_is_acti_7c0b49_idx'),
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['is_featured'], name='classes_is_feat_5295d2_idx'),
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['created_at'], name='classes_created_451968_idx'),
        ),
        migrations.AddIndex(
            model_name='classschedule',
            index=models.Index(fields=['class_obj'], name='class_sched_class_o_88d322_idx'),
        ),
        migrations.AddIndex(
            model_name='classschedule',
            index=models.Index(fields=['instructor'], name='class_sched_instruc_817970_idx'),
        ),
        migrations.AddIndex(
            model_name='classschedule',
            index=models.Index(fields=['start_time'], name='class_sched_start_t_fd4176_idx'),
        ),
        migrations.AddIndex(
            model_name='classschedule',
            index=models.Index(fields=['status'], name='class_sched_status_b01d6a_idx'),
        ),
        migrations.AddIndex(
            model_name='classschedule',
            index=models.Index(fields=['recurring_type'], name='class_sched_recurri_2477a0_idx'),
        ),
        migrations.AddIndex(
            model_name='classschedule',
            index=models.Index(fields=['parent_schedule'], name='class_sched_parent__1f2bdc_idx'),
        ),
    ]
